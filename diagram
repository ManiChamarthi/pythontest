from diagrams import Diagram, Cluster
from diagrams.aws.compute import Lambda
from diagrams.aws.integration import Eventbridge
from diagrams.aws.database import Dynamodb
from diagrams.aws.storage import S3
from diagrams.onprem.compute import Server
from diagrams.generic.storage import Storage
from diagrams.generic.blank import Blank
from diagrams.onprem.client import Users

with Diagram("M&A License Reporting Architecture - Horizontal Lambda Layout", show=True, direction="LR"):

    # Input Layer
    with Cluster("Input Layer"):
        upload_file = Storage("Upload File")
        s3_input = S3("S3: M&A Data")
        lambda_input = Lambda("Lambda: M&A_Data_R_W")
        dynamodb_table = Dynamodb("DynamoDB: wiz-mna-projects")

        upload_file >> s3_input >> lambda_input >> dynamodb_table

    # ServiceNow CMDB Integration
    with Cluster("ServiceNow CMDB Integration"):
        lambda_cmdb = Lambda("Lambda: fetch_CMDB")
        servicenow = Server("ServiceNow CMDB")
        lambda_cmdb >> servicenow

    # Wiz Integration (All Lambdas horizontal)
    with Cluster("Wiz Integration"):
        wiz = Blank("Wiz Platform")

        wiz_lambdas = [
            Lambda("wiz_Subscriptions"),
            Lambda("EKS_on_fargate"),
            Lambda("sagemaker_domains"),
            Lambda("sagemaker_endpoints"),
            Lambda("CMDB_report"),
            Lambda("ECS_fargate"),
            Lambda("cloudrun_revisions"),
            Lambda("GKE_Autopilot"),
            Lambda("VMs_report"),
            Lambda("container_hosts"),
            Lambda("non_05_disks"),
            Lambda("non_05_disks_storing"),
            Lambda("public_buckets"),
            Lambda("registry_images"),
            Lambda("serverless_functions"),
        ]

        wiz_output = S3("S3: Wiz Information")

        # Horizontal chaining
        wiz >> wiz_lambdas[0]
        for i in range(len(wiz_lambdas) - 1):
            wiz_lambdas[i] >> wiz_lambdas[i + 1]
        wiz_lambdas[-1] >> wiz_output

    # License Report Generation
    with Cluster("License Report Generation"):
        lambda_merge = Lambda("merge_and_licenses_count")
        s3_license = S3("S3: License Report")

        wiz_output >> lambda_merge
        dynamodb_table >> lambda_merge
        lambda_merge >> s3_license

    # Email Notification
    with Cluster("Email Notification"):
        lambda_email = Lambda("send_email")
        notify = Users("Notify via Email")
        s3_license >> lambda_email >> notify

    # EventBridge Rule (Central Trigger)
    eventbridge = Eventbridge("EventBridge Rule")
    eventbridge >> lambda_cmdb
    eventbridge >> lambda_merge
    eventbridge >> lambda_email
