from diagrams import Diagram, Cluster
from diagrams.aws.compute import Lambda
from diagrams.aws.integration import Eventbridge
from diagrams.aws.database import Dynamodb
from diagrams.aws.storage import S3
from diagrams.onprem.compute import Server
from diagrams.generic.storage import Storage
from diagrams.generic.blank import Blank
from diagrams.onprem.client import Users

with Diagram("M&A License Reporting Architecture", show=True, direction="LR"):

    # ---------------- INPUT LAYER ----------------
    with Cluster("Input Layer"):
        upload_file = Storage("Upload File (YAML)")
        s3_ma_data = S3("S3: M&A Data")
        lambda_rw = Lambda("Lambda: M&A_Data_R_W")
        dynamo_db = Dynamodb("DynamoDB: wiz-mna-projects")

        upload_file >> s3_ma_data >> lambda_rw >> dynamo_db

    # ---------------- WIZ INTEGRATION ----------------
    with Cluster("Wiz Integration"):
        wiz_icon = Blank("Wiz Platform")  # Represents the external Wiz service

        wiz_lambdas = [
            Lambda("wiz_Subscriptions"),
            Lambda("EKS_on_fargate"),
            Lambda("sagemaker_domains"),
            Lambda("sagemaker_endpoints"),
            Lambda("CMDB_report"),
            Lambda("ECS_fargate"),
            Lambda("cloudrun_revisions"),
            Lambda("GKE_Autopilot"),
            Lambda("VMs_report"),
            Lambda("container_hosts"),
            Lambda("non_05_disks"),
            Lambda("non_05_disks_storing"),
            Lambda("public_buckets"),
            Lambda("registry_images"),
            Lambda("serverless_functions"),
        ]

        wiz_output = S3("S3: Wiz Information")

        # Connect Wiz icon to first Lambda
        wiz_icon >> wiz_lambdas[0]

        # Connect all Wiz Lambdas horizontally
        for i in range(len(wiz_lambdas) - 1):
            wiz_lambdas[i] >> wiz_lambdas[i + 1]

        # Last lambda outputs to Wiz S3
        wiz_lambdas[-1] >> wiz_output

    # ---------------- CMDB INTEGRATION ----------------
    with Cluster("ServiceNow CMDB Integration"):
        lambda_cmdb = Lambda("fetch_CMDB_cloud_accounts")
        servicenow_cmdb = Server("ServiceNow CMDB")
        lambda_cmdb >> servicenow_cmdb

    # ---------------- REPORT GENERATION ----------------
    with Cluster("License Report Generation"):
        merge_lambda = Lambda("merge_and_licenses_count")
        s3_report = S3("S3: License Report")
        merge_lambda >> s3_report

    # ---------------- EMAIL NOTIFICATION ----------------
    with Cluster("Email Notification"):
        send_email = Lambda("send_email")
        email_icon = Users("Notify via Email")
        send_email >> email_icon

    # ---------------- EVENTBRIDGE ORCHESTRATION ----------------
    eventbridge = Eventbridge("EventBridge Rule")

    # EventBridge triggers all relevant lambdas
    eventbridge >> lambda_cmdb
    eventbridge >> merge_lambda
    eventbridge >> send_email

    # Data flows to report generation
    wiz_output >> merge_lambda
    dynamo_db >> merge_lambda

    # Final output from report to email
    s3_report >> send_email
