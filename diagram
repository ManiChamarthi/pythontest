from diagrams import Diagram, Cluster
from diagrams.aws.compute import Lambda
from diagrams.aws.integration import Eventbridge
from diagrams.aws.database import Dynamodb
from diagrams.aws.storage import S3
from diagrams.onprem.compute import Server
from diagrams.generic.storage import Storage

with Diagram("M&A License Reporting Architecture - Horizontal Layout with Clusters", show=True, direction="LR"):

    # Cluster: Input Layer
    with Cluster("Input Layer"):
        upload_file = Storage("Upload File (YAML)")
        s3_ma_data = S3("S3: M&A Data")
        lambda_rw = Lambda("Lambda: M&A_Data_R_W")
        dynamo_db = Dynamodb("DynamoDB: wiz-mna-projects")

        upload_file >> s3_ma_data >> lambda_rw >> dynamo_db

    # Cluster: Wiz Integration
    with Cluster("Wiz Integration (Horizontal Lambdas)"):
        wiz_lambdas = [
            Lambda("wiz_Subscriptions"),
            Lambda("EKS_on_fargate"),
            Lambda("sagemaker_domains"),
            Lambda("sagemaker_endpoints"),
            Lambda("CMDB_report"),
            Lambda("ECS_fargate"),
            Lambda("cloudrun_revisions"),
            Lambda("GKE_Autopilot"),
            Lambda("VMs_report"),
            Lambda("container_hosts"),
            Lambda("non_05_disks"),
            Lambda("non_05_disks_storing_containers"),
            Lambda("public_buckets"),
            Lambda("registry_images"),
            Lambda("serverless_functions"),
        ]

        for i in range(len(wiz_lambdas)-1):
            wiz_lambdas[i] >> wiz_lambdas[i+1]

        wiz_output = S3("S3: Wiz Info")
        wiz_lambdas[-1] >> wiz_output

    # Cluster: ServiceNow CMDB Integration
    with Cluster("ServiceNow CMDB Integration"):
        lambda_cmdb = Lambda("fetch_CMDB_cloud_accounts")
        servicenow_cmdb = Server("ServiceNow CMDB")
        lambda_cmdb >> servicenow_cmdb

    # Cluster: License Report Generation
    with Cluster("License Report Generation"):
        merge_lambda = Lambda("merge_and_licenses_count")
        s3_report = S3("S3: License Report")

    # Cluster: Email Notification
    with Cluster("Email Notification"):
        send_email = Lambda("send_email")

    # EventBridge Rule (external to all)
    eventbridge = Eventbridge("EventBridge Rule")

    # Trigger Connections
    eventbridge >> lambda_cmdb
    eventbridge >> merge_lambda
    eventbridge >> send_email

    # Data flows
    wiz_output >> merge_lambda
    dynamo_db >> merge_lambda
    merge_lambda >> s3_report >> send_email
