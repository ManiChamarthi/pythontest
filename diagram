from diagrams import Diagram, Cluster
from diagrams.aws.compute import Lambda
from diagrams.aws.integration import Eventbridge
from diagrams.aws.database import Dynamodb
from diagrams.aws.storage import S3
from diagrams.onprem.compute import Server
from diagrams.generic.storage import Storage

with Diagram("M&A License Reporting Architecture", show=True, direction="LR"):

    with Cluster("Input Layer"):
        upload_file = Storage("Upload File (YAML)")
        ma_data_bucket = S3("S3: M&A Data")
        lambda_rw = Lambda("Lambda: M&A_Data_R_W")
        dynamo_table = Dynamodb("DynamoDB: wiz-mna-projects")

        upload_file >> ma_data_bucket >> lambda_rw >> dynamo_table

    with Cluster("Wiz Integration"):
        wiz_output_bucket = S3("S3: Wiz Information")

        wiz_lambdas = [
            Lambda("wiz_Subscriptions_report"),
            Lambda("AWS_EKS_on_fargate_report"),
            Lambda("AWS_sagemaker_domains_report"),
            Lambda("AWS_sagemaker_endpoints_report"),
            Lambda("CMDB_report"),
            Lambda("ECS_fargate_containers_report"),
            Lambda("GCP_cloudrun_revisions_report"),
            Lambda("GKE_Autopilot_containers_report"),
            Lambda("VMs_report"),
            Lambda("container_hosts_report"),
            Lambda("non_05_disks_report"),
            Lambda("non_05_disks_storing_containers"),
            Lambda("public_buckets"),
            Lambda("registry_container_image"),
            Lambda("serverless_functions_report"),
        ]

        wiz_lambdas >> wiz_output_bucket

    with Cluster("ServiceNow CMDB Integration"):
        lambda_cmdb = Lambda("fetch_CMDB_cloud_accounts")
        servicenow_cmdb = Server("ServiceNow CMDB")
        lambda_cmdb >> servicenow_cmdb

    with Cluster("Report Generation"):
        merge_and_count = Lambda("merge_and_licenses_count")
        license_report = S3("S3: License Report")
        merge_and_count >> license_report

    with Cluster("Email Notification"):
        send_email = Lambda("send_email")

    # EventBridge orchestration
    scheduler = Eventbridge("EventBridge Rule")

    # Triggered flows
    scheduler >> lambda_cmdb
    scheduler >> merge_and_count
    scheduler >> send_email

    # Data dependencies
    wiz_output_bucket >> merge_and_count
    dynamo_table >> merge_and_count
    license_report >> send_email
