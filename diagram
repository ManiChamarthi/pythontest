from diagrams import Diagram, Cluster
from diagrams.aws.compute import Lambda
from diagrams.aws.integration import Eventbridge
from diagrams.aws.database import Dynamodb
from diagrams.aws.storage import S3
from diagrams.onprem.compute import Server
from diagrams.generic.storage import Storage
from diagrams.generic.blank import Blank
from diagrams.onprem.client import Users

with Diagram("M&A License Reporting Architecture - Custom Layout", show=True, direction="TB"):

    # Left side: Input Layer
    with Cluster("Input Layer"):
        upload_file = Storage("Upload File")
        s3_ma_data = S3("S3: M&A Data")
        lambda_rw = Lambda("Lambda: M&A_Data_R_W")
        dynamo_db = Dynamodb("DynamoDB: wiz-mna-projects")
        upload_file >> s3_ma_data >> lambda_rw >> dynamo_db

    # Left side: CMDB Layer
    with Cluster("ServiceNow CMDB Integration"):
        lambda_cmdb = Lambda("Lambda: fetch_CMDB_cloud_accounts")
        servicenow = Server("ServiceNow CMDB")
        lambda_cmdb >> servicenow

    # Middle: Orchestration
    eventbridge = Eventbridge("EventBridge Rule")

    # CMDB and Input to EventBridge (trigger connections)
    lambda_cmdb << eventbridge
    lambda_rw << s3_ma_data

    # Below: Wiz Integration
    with Cluster("Wiz Integration"):
        wiz_icon = Blank("Wiz Platform")
        wiz_lambdas = [
            Lambda("wiz_Subscriptions"),
            Lambda("EKS_on_fargate"),
            Lambda("sagemaker_domains"),
            Lambda("sagemaker_endpoints"),
            Lambda("CMDB_report"),
            Lambda("ECS_fargate"),
            Lambda("cloudrun_revisions"),
            Lambda("GKE_Autopilot"),
            Lambda("VMs_report"),
            Lambda("container_hosts"),
            Lambda("non_05_disks"),
            Lambda("non_05_disks_storing"),
            Lambda("public_buckets"),
            Lambda("registry_images"),
            Lambda("serverless_functions"),
        ]
        wiz_output = S3("S3: Wiz Information")
        wiz_icon >> wiz_lambdas[0]
        for i in range(len(wiz_lambdas) - 1):
            wiz_lambdas[i] >> wiz_lambdas[i + 1]
        wiz_lambdas[-1] >> wiz_output

    # License Report Generation (below Wiz)
    with Cluster("License Report Generation"):
        merge_lambda = Lambda("merge_and_licenses_count")
        report_s3 = S3("S3: License Report")
        merge_lambda >> report_s3

    # Data sources to report generator
    wiz_output >> merge_lambda
    dynamo_db >> merge_lambda
    eventbridge >> merge_lambda

    # Right side: Email Notification
    with Cluster("Email Notification"):
        send_email = Lambda("send_email")
        email_user = Users("Notify via Email")
        send_email >> email_user

    # Report to email
    report_s3 >> send_email
    eventbridge >> send_email
